{"version":3,"sources":["webpack:///./src/app/services/account/account.service.ts"],"names":[],"mappings":"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","file":"default~pages-account-settings-account-settings-module~pages-dashboard-dashboard-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BaseService } from '../base/base.service';\r\nimport { Platform } from '@ionic/angular';\r\nimport { LocalNotifications } from '@ionic-native/local-notifications/ngx';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\nimport { FirebaseService } from '../firebase/firebase.service';\r\n\r\nexport enum NotificationValues {\r\n  WORKOUT_REMINDER = 1,\r\n  WEIGHT_REMINDER = 2,\r\n  PHOTO_REMINDER = 3\r\n}\r\n\r\nexport interface AccountSetting {\r\n  transphormer_id: number;\r\n  receive_notification: boolean;\r\n  receive_email: boolean;\r\n  photo_reminder: number;\r\n  weigh_reminder: number;\r\n  workout_reminder: boolean;\r\n  what_time: string;\r\n  receive_livestream_notification: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService extends BaseService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected platform: Platform,\r\n    private localNotification: LocalNotifications,\r\n    private firebase: FirebaseService\r\n  ) {\r\n    super(http, platform);\r\n    AccountService.SET_PLATFORM(platform);\r\n  }\r\n\r\n  public getAccountSetting(): Promise<AccountSetting | ErrorFormat> {\r\n    return this.http\r\n      .get<any>(AccountService.Url('account/show'), AccountService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .catch(AccountService.HandleError);\r\n  }\r\n\r\n  public updateAccountSetting(data): Promise<any> {\r\n    return this.http\r\n      .post<any>(AccountService.Url('account/update'), data, AccountService.BaseOptions())\r\n      .toPromise()\r\n      .catch(AccountService.HandleError);\r\n  }\r\n\r\n  public async setWorkoutReminder(toRemind: boolean, hour?: number, minute?: number) {\r\n    if (this.platform.is('cordova')) {\r\n      await this.localNotification.clear(NotificationValues.WORKOUT_REMINDER);\r\n\r\n      if (toRemind) {\r\n        this.localNotification.schedule({\r\n          id: NotificationValues.WORKOUT_REMINDER,\r\n          title: 'Workout Reminder',\r\n          text: 'Time to do some work! #DuesPaid',\r\n          foreground: true,\r\n          trigger: {\r\n            every: {\r\n              minute: minute,\r\n              hour: hour,\r\n            },\r\n            count: 10\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public async setPhotoReminder(toRemind: boolean, weeks: number) {\r\n    if (this.platform.is('cordova')) {\r\n      await this.localNotification.clear(NotificationValues.PHOTO_REMINDER);\r\n\r\n      if (toRemind) {\r\n        this.localNotification.schedule({\r\n          id: NotificationValues.PHOTO_REMINDER,\r\n          title: 'Picture Reminder',\r\n          text: 'Don’t forget to take this week’s progress pictures!',\r\n          foreground: true,\r\n          trigger: {\r\n            every: {\r\n              hour: 7,\r\n              minute: 0,\r\n              weekday: 5 /* Friday */\r\n            },\r\n            count: 10\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public async setWeighInReminder(toRemind: boolean, weeks: number) {\r\n    if (this.platform.is('cordova')) {\r\n      await this.localNotification.clear(NotificationValues.WEIGHT_REMINDER);\r\n\r\n      if (toRemind) {\r\n        this.localNotification.schedule({\r\n          id: NotificationValues.WEIGHT_REMINDER,\r\n          title: 'Weigh In Reminder',\r\n          text: 'Hop on the scale and then enter your progress in the app!',\r\n          foreground: true,\r\n          trigger: {\r\n            every: {\r\n              hour: 7,\r\n              minute: 0,\r\n              weekday: 3 /* Wednesday */\r\n            },\r\n            count: 10\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public async subscribeToLiveStream(subscribe: boolean) {\r\n    if (subscribe) {\r\n      this.firebase.subscribeToLivestreamNotification();\r\n    } else {\r\n      this.firebase.unsubscribeToLivestreamNotification();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}