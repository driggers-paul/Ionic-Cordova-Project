{"version":3,"sources":["webpack:///./src/app/services/custom-macro/custom-macro.service.ts","webpack:///./src/app/services/food-items/food-items.service.ts"],"names":[],"mappings":"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","file":"default~pages-custom-food-template-custom-food-template-module~pages-dashboard-dashboard-module~page~9737ce41.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AlertController, NavController, Platform } from '@ionic/angular';\r\nimport { Moment } from 'moment';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\nimport * as moment from 'moment';\r\nimport { Transphormer } from '../authentication/authentication.service';\r\n\r\nexport interface CustomMacro {\r\n  id: number;\r\n  reset_to_original: boolean;\r\n  carbs: number;\r\n  fats: number;\r\n  protein: number;\r\n  calories: number;\r\n  transphormer_id: number;\r\n  edit_date: Moment | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomMacroService extends BaseService {\r\n\r\n  constructor(\r\n    public http: HttpClient,\r\n    protected platform: Platform,\r\n    public alertCtrl: AlertController,\r\n    public navCtrl: NavController\r\n  ) {\r\n    super(http, platform);\r\n  }\r\n\r\n  /**\r\n   * Returns list of previously created macros\r\n   */\r\n  public history(): Promise<CustomMacro[] | ErrorFormat> {\r\n    return this.http.get<CustomMacro[]>(\r\n      CustomMacroService.Url('nutritions/custom-macros'),\r\n      CustomMacroService.BaseOptions(true, true)\r\n    )\r\n      .toPromise()\r\n      .then(result => result.map(macro => {\r\n        macro.edit_date = moment(macro.edit_date);\r\n        return macro;\r\n      }))\r\n      .catch(CustomMacroService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Creates new custom macro record\r\n   *\r\n   * @param reset_to_original\r\n   * @param protein\r\n   * @param carbs\r\n   * @param fats\r\n   * @param date\r\n   */\r\n  public create(\r\n    reset_to_original: boolean, protein: number, carbs: number, fats: number, date: string\r\n  ): Promise<CustomMacro | ErrorFormat> {\r\n    const data = {\r\n      reset_to_original,\r\n      carbs,\r\n      fats,\r\n      protein,\r\n      date\r\n    };\r\n    return this.http.post<CustomMacro>(CustomMacroService.Url('nutritions/custom-macros'), data, CustomMacroService.BaseOptions())\r\n      .toPromise()\r\n      .then(result => {\r\n        result.edit_date = moment(result.edit_date);\r\n        return result;\r\n      })\r\n      .catch(CustomMacroService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Action to update existing custom macro record\r\n   * @param id\r\n   * @param reset_to_original\r\n   * @param protein\r\n   * @param carbs\r\n   * @param fats\r\n   */\r\n  public update(\r\n    id: number, reset_to_original: boolean, protein: number, carbs: number, fats: number\r\n  ): Promise<CustomMacro | ErrorFormat> {\r\n    const data = {\r\n      reset_to_original,\r\n      carbs,\r\n      fats,\r\n      protein\r\n    };\r\n    return this.http.patch<CustomMacro>(\r\n      CustomMacroService.Url(`nutritions/custom-macros/${id}`), data, CustomMacroService.BaseOptions()\r\n    )\r\n      .toPromise()\r\n      .then(result => {\r\n        result.edit_date = moment(result.edit_date);\r\n        return result;\r\n      })\r\n      .catch(CustomMacroService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Returns the latest custom macro\r\n   */\r\n  public latestMacro(): Promise<CustomMacro | null | ErrorFormat> {\r\n    return this.http.get<CustomMacro | null>(\r\n      CustomMacroService.Url('nutritions/custom-macros/latest'), CustomMacroService.BaseOptions()\r\n    )\r\n      .toPromise()\r\n      .then<CustomMacro | null>(result => {\r\n        if (result.id) {\r\n          result.edit_date = moment(result.edit_date);\r\n          return result;\r\n        } else {\r\n          return null;\r\n        }\r\n      })\r\n      .catch(CustomMacroService.HandleError);\r\n  }\r\n\r\n  public async notifyToUpdateMacro(newWeight: number, comparisionWeight) {\r\n    const diff = newWeight - comparisionWeight;\r\n    if (Math.abs(diff) > 10) {\r\n      let latestMacro = <CustomMacro>await this.latestMacro();\r\n      latestMacro = latestMacro || <CustomMacro>{reset_to_original: true};\r\n\r\n      const transphormer: Transphormer = JSON.parse(window.localStorage.getItem('transphormer'));\r\n\r\n      if (!latestMacro.reset_to_original && transphormer.likely_to_do === 'Calorie / Macro counting') {\r\n        const alert = await this.alertCtrl.create({\r\n          header: 'Update your macro',\r\n          message: `You have ${diff > 0 ? 'gained' : 'lost'} 10 pounds or more. Please update your macro settings.`,\r\n          backdropDismiss: false,\r\n          buttons: [{\r\n            text: 'Cancel',\r\n            cssClass: 'global-danger',\r\n          }, {\r\n            text: 'Update',\r\n            handler: () => {\r\n              this.navCtrl.navigateRoot('macro?openCustomMacro=true');\r\n            }\r\n          }]\r\n        });\r\n\r\n        await alert.present();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Platform } from '@ionic/angular';\r\nimport { AltServing, FoodItem } from '../nutrition/nutrition.service';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\n\r\nexport interface TrackedFood {\r\n  id: number;\r\n  nutrition_day_id: number;\r\n  meal: number;\r\n  name: string;\r\n  fats: number;\r\n  carbs: number;\r\n  protein: number;\r\n  calories: number;\r\n  consumed_amount: number;\r\n  consumed_unit: string;\r\n  is_custom: boolean;\r\n  is_custom_food_template: boolean;\r\n  serving_information: ServingInfo;\r\n  is_branded_food: boolean;\r\n  nutritioninx_item_id: string | null;\r\n  nutritioninx_food_name: string | null;\r\n  total_count?: number;\r\n}\r\n\r\ninterface ServingInfo {\r\n  id: number;\r\n  tracked_item_id: number;\r\n  fats: number;\r\n  carbs: number;\r\n  protein: number;\r\n  calories: number;\r\n  serving_amount: number;\r\n  serving_unit: string;\r\n  alt_servings: AltServing[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FoodItemsService extends BaseService {\r\n\r\n  constructor(protected http: HttpClient, protected platform: Platform) {\r\n    super(http, platform);\r\n\r\n    FoodItemsService.SET_PLATFORM(platform);\r\n  }\r\n\r\n  public createFoodItem(nutritionId: number, meal: number, isCustom: boolean, foodItem: FoodItem, isCustomFoodTemplate = false): Promise<FoodItem | ErrorFormat> {\r\n    const body = this.convertFoodItemToBody(foodItem, meal, isCustom, isCustomFoodTemplate);\r\n\r\n    return this.http.post<TrackedFood>(FoodItemsService.Url(`nutritions/macro-counting/${nutritionId}/tracked-item`),\r\n      body,\r\n      FoodItemsService.BaseOptions()\r\n    )\r\n      .toPromise()\r\n      .then(result => this.convertToFoodItem(result))\r\n      .catch(FoodItemsService.HandleError);\r\n  }\r\n\r\n  public convertToFoodItem(trackedItem: TrackedFood): FoodItem {\r\n    return <FoodItem>{\r\n      id: trackedItem.id,\r\n      name: trackedItem.name,\r\n      meal: trackedItem.meal,\r\n      calories: trackedItem.calories,\r\n      carbs: trackedItem.carbs,\r\n      protein: trackedItem.protein,\r\n      fats: trackedItem.fats,\r\n      is_custom: trackedItem.is_custom,\r\n      is_branded_food: trackedItem.is_branded_food,\r\n      nutritioninx_food_name: trackedItem.nutritioninx_food_name,\r\n      nutritioninx_item_id: trackedItem.nutritioninx_item_id,\r\n      is_custom_food_template: trackedItem.is_custom_food_template,\r\n      amount_consumed: {\r\n        unit: trackedItem.consumed_unit,\r\n        amount: trackedItem.consumed_amount,\r\n      },\r\n      serving_size: {\r\n        calories: trackedItem.serving_information.calories,\r\n        carbs: trackedItem.serving_information.carbs,\r\n        protein: trackedItem.serving_information.protein,\r\n        fats: trackedItem.serving_information.fats,\r\n        unit: trackedItem.serving_information.serving_unit,\r\n        amount: trackedItem.serving_information.serving_amount,\r\n      },\r\n      alt_servings: trackedItem.serving_information.alt_servings,\r\n      total_count: trackedItem.total_count || 0\r\n    };\r\n  }\r\n\r\n  public updateFoodItem(foodItemId: number, nutritionId: number, meal: number, isCustom: boolean, foodItem: FoodItem, isCustomFoodTemplate = false)\r\n    : Promise<FoodItem | ErrorFormat> {\r\n    const body = this.convertFoodItemToBody(foodItem, meal, isCustom, isCustomFoodTemplate);\r\n\r\n    return this.http.put<TrackedFood>(FoodItemsService.Url(`nutritions/macro-counting/${nutritionId}/tracked-item/${foodItemId}`),\r\n      body,\r\n      FoodItemsService.BaseOptions()\r\n    )\r\n      .toPromise()\r\n      .then(result => this.convertToFoodItem(result))\r\n      .catch(FoodItemsService.HandleError);\r\n  }\r\n\r\n  public deleteFoodItem(foodItemId: number, nutritionDayId: number): Promise<any | ErrorFormat> {\r\n    return this.http.delete(FoodItemsService.Url(`nutritions/macro-counting/${nutritionDayId}/tracked-item/${foodItemId}`),\r\n      FoodItemsService.BaseOptions()\r\n    )\r\n      .toPromise()\r\n      .catch(FoodItemsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Returns recent food items\r\n   */\r\n  public recentFoodItems(): Promise<FoodItem[] | ErrorFormat> {\r\n    return this.http.get<TrackedFood[]>(FoodItemsService.Url(`nutritions/macro-counting/tracked-item/recent`),\r\n      FoodItemsService.BaseOptions(true, true, 900)\r\n    )\r\n      .toPromise()\r\n      .then(result => result.map(item => this.convertToFoodItem(item)))\r\n      .catch(FoodItemsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Returns around this time food items\r\n   */\r\n  public aroundTimeFoodItems(): Promise<FoodItem[] | ErrorFormat> {\r\n    return this.http.get<TrackedFood[]>(FoodItemsService.Url(`nutritions/macro-counting/tracked-item/around-this-time`),\r\n      FoodItemsService.BaseOptions(true, true, 3600)\r\n    )\r\n      .toPromise()\r\n      .then(result => result.map(item => this.convertToFoodItem(item)))\r\n      .catch(FoodItemsService.HandleError);\r\n  }\r\n\r\n  private convertFoodItemToBody(foodItem: FoodItem, meal: number, isCustom: boolean, isCustomFoodTemplate = false) {\r\n    return {\r\n      calories: foodItem.calories,\r\n      fats: foodItem.fats,\r\n      carbs: foodItem.carbs,\r\n      protein: foodItem.protein,\r\n      meal: meal,\r\n      is_custom: isCustom,\r\n      name: foodItem.name,\r\n      is_custom_food_template: isCustomFoodTemplate,\r\n      is_branded_food: foodItem.is_branded_food,\r\n      nutritioninx_food_name: foodItem.nutritioninx_food_name,\r\n      nutritioninx_item_id: foodItem.nutritioninx_item_id,\r\n      meal_template_id: foodItem.meal_template_id || null,\r\n      serving_size: {\r\n        calories: foodItem.serving_size.calories,\r\n        fats: foodItem.serving_size.fats,\r\n        carbs: foodItem.serving_size.carbs,\r\n        protein: foodItem.serving_size.protein,\r\n        amount: foodItem.serving_size.amount,\r\n        unit: foodItem.serving_size.unit,\r\n      },\r\n      amount_consumed: {\r\n        amount: foodItem.amount_consumed.amount,\r\n        unit: foodItem.amount_consumed.unit,\r\n      },\r\n      alt_servings: foodItem.alt_servings\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""}