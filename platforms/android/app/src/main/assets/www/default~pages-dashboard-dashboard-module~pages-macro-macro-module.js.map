{"version":3,"sources":["webpack:///./src/app/services/macro-management/macro-management.service.ts","webpack:///./src/app/services/nutrition/nutrition.service.ts","webpack:///./src/app/services/weights/weights.service.ts"],"names":[],"mappings":"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","file":"default~pages-dashboard-dashboard-module~pages-macro-macro-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MacroCountingInfo, Meal, NutritionService } from '../nutrition/nutrition.service';\r\nimport { Weight, WeightsService } from '../weights/weights.service';\r\nimport { Transphormer } from '../authentication/authentication.service';\r\nimport { NutritionCalculatorService } from '../nutrition-calculator/nutrition-calculator.service';\r\nimport { CustomMacro, CustomMacroService } from '../custom-macro/custom-macro.service';\r\nimport { MacroInfo, NutritionCalculator } from '../../pages/nutrition/nutrition-calculator';\r\nimport { FoodItemsService } from '../food-items/food-items.service';\r\nimport { Moment } from 'moment';\r\nimport * as moment from 'moment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MacroManagementService {\r\n\r\n  constructor(\r\n    public nutritionService: NutritionService,\r\n    public nutritionCalculator: NutritionCalculatorService,\r\n    public customMacroService: CustomMacroService,\r\n    public weightService: WeightsService,\r\n    public foodItemService: FoodItemsService\r\n  ) {\r\n  }\r\n\r\n  public async macros(\r\n    transphormer: Transphormer,\r\n    forMacroCounting: boolean,\r\n    currentWeight: Weight | null = null,\r\n    date: Moment | null = null\r\n  ) {\r\n\r\n    let goalValues = this.defaultGoalValues();\r\n    let bmrValues = this.defaultGoalValues();\r\n    let meals = this.blankMeal();\r\n    date = date || moment();\r\n    const weightRequest = currentWeight ? Promise.resolve(currentWeight) : this.weightService.latestWeight();\r\n\r\n    const [weight, latestMacro, macroCounting] = <[Weight, CustomMacro, MacroCountingInfo]>await Promise.all([\r\n      weightRequest,\r\n      this.customMacroService.latestMacro(),\r\n      this.macroCounting(date)\r\n    ]);\r\n    let macros: MacroInfo | null = null;\r\n\r\n    if (!forMacroCounting) {\r\n      macros = new NutritionCalculator(transphormer, weight.weight).getMacros();\r\n\r\n      return {goalValues, macros, meals, macroCounting, weight, bmrValues};\r\n    }\r\n\r\n    bmrValues = this.bmrValue(weight, transphormer);\r\n    goalValues = bmrValues;\r\n\r\n    if (latestMacro) {\r\n      if (!latestMacro.reset_to_original) {\r\n        goalValues = latestMacro;\r\n      }\r\n    }\r\n    meals = this.setupMeals(meals, macroCounting);\r\n\r\n    return {goalValues, macros, meals, macroCounting, weight, bmrValues};\r\n  }\r\n\r\n  public bmrValue(weight: Weight, transphormer: Transphormer) {\r\n    return this.nutritionCalculator.calculateAdvancedMacros(\r\n      weight.weight, transphormer.goal_weight, transphormer.activity_level,\r\n      transphormer.transphormation_goal, transphormer.sex, transphormer.preference_macro_counting\r\n    );\r\n  }\r\n\r\n  public blankMeal() {\r\n    const meals = [];\r\n\r\n    for (let i = 1; i <= 6; i++) {\r\n      meals.push({\r\n        meal_count: i,\r\n        food_items: [],\r\n        active: false\r\n      });\r\n    }\r\n\r\n    return meals;\r\n  }\r\n\r\n  public defaultGoalValues() {\r\n    return {\r\n      calories: 0,\r\n      protein: 0,\r\n      fats: 0,\r\n      carbs: 0\r\n    };\r\n  }\r\n\r\n  public setupMeals(meals: Meal[], macroCounting: MacroCountingInfo) {\r\n    return meals.map(meal => {\r\n      meal.food_items = macroCounting.tracked_items\r\n        .filter(trackedItem => trackedItem.meal === meal.meal_count)\r\n        .map(trackedItem => this.foodItemService.convertToFoodItem(trackedItem));\r\n      meal.active = meal.food_items.length > 0;\r\n      return meal;\r\n    });\r\n  }\r\n\r\n  public async macroCounting(date: Moment): Promise<MacroCountingInfo> {\r\n    let macroCounting: MacroCountingInfo;\r\n    try {\r\n      macroCounting = <MacroCountingInfo>await this.nutritionService.getMacroCountingInfo(date.toDate());\r\n    } catch (e) {\r\n      if (e.status !== 404) {\r\n        throw e;\r\n      }\r\n\r\n      macroCounting = {\r\n        track_date: moment().format('YYYY-MM-DD'),\r\n        water_amount: 0,\r\n        tracked_items: []\r\n      };\r\n    }\r\n\r\n    return macroCounting;\r\n\r\n  }\r\n\r\n  public displayMacros(transphormer: Transphormer, macros?: MacroInfo, meals?: Meal[]) {\r\n    return {\r\n      get calories() {\r\n        return calculateCalorieValue('calories');\r\n      },\r\n      get fats() {\r\n        return calculateCalorieValue('fats');\r\n      },\r\n      get protein() {\r\n        return calculateCalorieValue('protein');\r\n      },\r\n      get carbs() {\r\n        return calculateCalorieValue('carbs');\r\n      },\r\n    };\r\n\r\n    function calculateCalorieValue(type: string): string {\r\n      if (transphormer.likely_to_do !== 'Calorie / Macro counting') {\r\n        if (macros) {\r\n          return macros[type].toString();\r\n        }\r\n\r\n        return '?';\r\n      }\r\n\r\n      if (!meals) {\r\n        return '?';\r\n      }\r\n\r\n      return meals.reduce((carry, meal) => carry + meal.food_items\r\n          .reduce((typeValue, foodItem) => typeValue + foodItem[type], 0)\r\n        , 0).toFixed(0);\r\n    }\r\n  }\r\n\r\n\r\n  // public get calories(): string {\r\n  //   if (!this.transphormerDoingCalorieMacroCounting) {\r\n  //     if (this.macros) {\r\n  //       return this.macros.calories.toString();\r\n  //     } else {\r\n  //       return '?';\r\n  //     }\r\n  //   }\r\n  //   if (!this.meals) {\r\n  //     return '?';\r\n  //   }\r\n  //   return this.meals\r\n  //     .reduce((carry, meal) => carry + meal.food_items\r\n  //         .reduce((calories, foodItem) => calories + foodItem.calories, 0)\r\n  //       , 0).toFixed(0);\r\n  // }\r\n  //\r\n  // public get protein(): string {\r\n  //   if (!this.transphormerDoingCalorieMacroCounting && this.macros) {\r\n  //     if (this.macros) {\r\n  //       return this.macros.protein.toString();\r\n  //     } else {\r\n  //       return '?';\r\n  //     }\r\n  //   }\r\n  //   if (!this.meals) {\r\n  //     return '?';\r\n  //   }\r\n  //   return this.meals\r\n  //     .reduce((carry, meal) => carry + meal.food_items\r\n  //         .reduce((protein, foodItem) => protein + foodItem.protein, 0)\r\n  //       , 0).toFixed(0);\r\n  // }\r\n  //\r\n  // public get carbs(): string {\r\n  //   if (!this.transphormerDoingCalorieMacroCounting && this.macros) {\r\n  //     if (this.macros) {\r\n  //       return this.macros.carbs.toString();\r\n  //     } else {\r\n  //       return '?';\r\n  //     }\r\n  //   }\r\n  //   if (!this.meals) {\r\n  //     return '?';\r\n  //   }\r\n  //   return this.meals\r\n  //     .reduce((carry, meal) => carry + meal.food_items\r\n  //         .reduce((carbs, foodItem) => carbs + foodItem.carbs, 0)\r\n  //       , 0).toFixed(0);\r\n  // }\r\n  //\r\n  // public get fats(): string {\r\n  //   if (!this.transphormerDoingCalorieMacroCounting && this.macros) {\r\n  //     if (this.macros) {\r\n  //       return this.macros.fats.toString();\r\n  //     } else {\r\n  //       return '?';\r\n  //     }\r\n  //   }\r\n  //   if (!this.meals) {\r\n  //     return '?';\r\n  //   }\r\n  //   return this.meals\r\n  //     .reduce((carry, meal) => carry + meal.food_items\r\n  //         .reduce((fats, foodItem) => fats + foodItem.fats, 0)\r\n  //       , 0).toFixed(0);\r\n  // }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\nimport { Platform } from '@ionic/angular';\r\nimport { choices } from '../../pages/nutrition/nutrition-values';\r\nimport * as moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { TrackedFood } from '../food-items/food-items.service';\r\n\r\ntype NutritionTypes = 'protein' | 'carb' | 'veggie';\r\n\r\nexport interface NutritionItem {\r\n  // id: number;\r\n  name: string;\r\n  type: NutritionTypes;\r\n  unit: string;\r\n  quantity?: number;\r\n  // created_at: string;\r\n  // updated_at: string;\r\n  calculatedQuantity?: number;\r\n}\r\n\r\nexport interface MacroCountingInfo {\r\n  id?: number;\r\n  track_date: string | Date | Moment;\r\n  water_amount: number;\r\n  tracked_items: TrackedFood[];\r\n}\r\n\r\nexport interface Meal {\r\n  meal_count: number;\r\n  food_items: FoodItem[];\r\n  active: boolean;\r\n}\r\n\r\nexport interface FoodItem {\r\n  id?: number;\r\n  meal?: number;\r\n  carbs: number;\r\n  calories: number;\r\n  protein: number;\r\n  fats: number;\r\n  base_weight: number;\r\n  name: string;\r\n  is_custom: boolean;\r\n  is_custom_food_template?: boolean;\r\n  is_branded_food?: boolean;\r\n  nutritioninx_food_name?: string;\r\n  nutritioninx_item_id?: string;\r\n  meal_template_id?: number;\r\n  serving_size?: {\r\n    amount: number;\r\n    unit: string;\r\n    carbs: number;\r\n    calories: number;\r\n    protein: number;\r\n    fats: number;\r\n  };\r\n  amount_consumed?: {\r\n    amount: number;\r\n    unit: string;\r\n  };\r\n  alt_servings?: AltServing[] | null;\r\n  total_count?: number;\r\n}\r\n\r\nexport interface AltServing {\r\n  serving_weight: number;\r\n  quantity: number;\r\n  measure: string;\r\n  qty?: number;\r\n  seq?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NutritionService extends BaseService {\r\n\r\n  constructor(protected http: HttpClient, protected platform: Platform) {\r\n    super(http, platform);\r\n    NutritionService.SET_PLATFORM(platform);\r\n  }\r\n\r\n  public getNutritionItems(): Promise<NutritionItem[] | ErrorFormat> {\r\n    const result: NutritionItem[] = [];\r\n    for (const type in choices) {\r\n      if (choices[type] instanceof Array) {\r\n        const options = choices[type];\r\n        for (let i = 0; i < options.length; i++) {\r\n          result.push({type, name: options[i].name, unit: options[i].unit} as NutritionItem);\r\n        }\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(result)\r\n      .catch(NutritionService.HandleError);\r\n  }\r\n\r\n  public getMacroCountingInfo(date: Date): Promise<MacroCountingInfo | ErrorFormat> {\r\n    const mDate = moment(date);\r\n    return this.http.get<MacroCountingInfo>(NutritionService.Url(`nutritions/macro-counting/${mDate.format('YYYY-MM-DD')}`), NutritionService.BaseOptions())\r\n      .toPromise()\r\n      .then(macroInfo => {\r\n        macroInfo.track_date = moment(macroInfo.track_date);\r\n        return macroInfo;\r\n      })\r\n      .catch(NutritionService.HandleError);\r\n  }\r\n\r\n\r\n  public storeMacroCountingInfo(date: string | Date | Moment, water: number): Promise<MacroCountingInfo | ErrorFormat> {\r\n    date = <Moment>(!(date instanceof moment) ? moment(date) : date);\r\n    const data = {\r\n      date: date.format('YYYY-MM-DD'),\r\n      water\r\n    };\r\n    return this.http.post<MacroCountingInfo>(NutritionService.Url('nutritions/macro-counting'), data, NutritionService.BaseOptions())\r\n      .toPromise()\r\n      .catch(NutritionService.HandleError);\r\n  }\r\n\r\n  public patchMacroCountingInfo(id: number, date: string | Date | Moment, water: number): Promise<MacroCountingInfo | ErrorFormat> {\r\n    date = <Moment>(!(date instanceof moment) ? moment(date) : date);\r\n    const data = {\r\n      date: date.format('YYYY-MM-DD'),\r\n      water\r\n    };\r\n    return this.http.put<MacroCountingInfo>(NutritionService.Url(`nutritions/macro-counting/${id}`), data, NutritionService.BaseOptions())\r\n      .toPromise()\r\n      .catch(NutritionService.HandleError);\r\n  }\r\n\r\n  public updateMacroCountingInfo(macroInfo: MacroCountingInfo): Promise<MacroCountingInfo | ErrorFormat> {\r\n    if (macroInfo.id) {\r\n      return this.patchMacroCountingInfo(macroInfo.id, macroInfo.track_date, macroInfo.water_amount);\r\n    } else {\r\n      return this.storeMacroCountingInfo(macroInfo.track_date, macroInfo.water_amount);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as moment from 'moment';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\nimport { Moment } from 'moment';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nexport interface Weight {\r\n  weight: number;\r\n  logged_on: string | Moment;\r\n  id: number;\r\n  transphormer_id: number;\r\n  nice_logged_date?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WeightsService extends BaseService {\r\n\r\n  constructor(protected http: HttpClient, protected platform: Platform) {\r\n    super(http, platform);\r\n    WeightsService.SET_PLATFORM(platform);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the latest weight of the transphormer\r\n   */\r\n  public latestWeight(): Promise<Weight | null | ErrorFormat> {\r\n    return this.http.get<Weight>(WeightsService.Url('weigh-ins/latest'), WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(weight => this.loggedDateConversion(this.checkWeightValue(weight)))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Stores weight log for the transphormer\r\n   * @param weight\r\n   */\r\n  public saveWeight(weight: number): Promise<Weight | null | ErrorFormat> {\r\n    const data = {weight};\r\n    return this.http.post<Weight | null>(WeightsService.Url('weigh-ins'), data, WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(newWeight => this.loggedDateConversion(newWeight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * List all weights for the transphormer\r\n   */\r\n  public listWeights(): Promise<Weight[] | ErrorFormat> {\r\n    return this.http.get<Weight[]>(WeightsService.Url('weigh-ins'), WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(weights => weights.map(weight => this.loggedDateConversion(weight)))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Converts logged date string value to date value\r\n   * @param weight\r\n   */\r\n  private loggedDateConversion(weight: Weight | null): Weight {\r\n    if (weight !== null) {\r\n      weight.logged_on = moment.utc(weight.logged_on, 'YYYY-MM-DD HH:mm:ss', true);\r\n    }\r\n\r\n    return weight;\r\n  }\r\n\r\n  /**\r\n   * Updates the weight\r\n   * @param id\r\n   * @param weight\r\n   */\r\n  public updateWeight(id: number, weight: number): Promise<Weight | ErrorFormat> {\r\n    return this.http.put<Weight>(WeightsService.Url(`weigh-ins/${id}`), {weight}, WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .then(newWeight => this.loggedDateConversion(newWeight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Deletes the weight\r\n   * @param id\r\n   */\r\n  public deleteWeight(id: number): Promise<any | ErrorFormat> {\r\n    return this.http.delete(WeightsService.Url(`weigh-ins/${id}`), WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  private checkWeightValue(weight: Weight | any): Weight | null {\r\n    if (weight.hasOwnProperty('id')) {\r\n      return weight;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get single weight instance\r\n   * @param id\r\n   */\r\n  public getWeight(id: number): Promise<Weight | ErrorFormat> {\r\n    return this.http.get<Weight>(WeightsService.Url(`weigh-ins/${id}`), WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .then(weight => this.loggedDateConversion(weight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n}\r\n"],"sourceRoot":""}