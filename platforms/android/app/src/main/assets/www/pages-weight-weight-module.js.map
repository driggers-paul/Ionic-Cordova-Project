{"version":3,"sources":["webpack:///./src/app/pages/weight/weight.module.ts","webpack:///./src/app/pages/weight/weight.page.html","webpack:///./src/app/pages/weight/weight.page.scss","webpack:///./src/app/pages/weight/weight.page.ts","webpack:///./src/app/services/analytics/analytic-events.enum.ts","webpack:///./src/app/services/weights/weights.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACmB;AACX;AACV;AACF;AACkC;AAE7E,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uDAAU;KACtB;CACF,CAAC;AAaF;IAAA;IACA,CAAC;IADY,gBAAgB;QAX5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC7B,kEAAmB;gBACnB,qFAAc;aACf;YACD,YAAY,EAAE,CAAC,uDAAU,CAAC;SAC3B,CAAC;OACW,gBAAgB,CAC5B;IAAD,uBAAC;CAAA;AAD4B;;;;;;;;;;;;AC1B7B,sEAAsE,kCAAkC,ugDAAugD,gCAAgC,kF;;;;;;;;;;;ACA/oD,2BAA2B,kBAAkB,mCAAmC,wBAAwB,EAAE,qBAAqB,kBAAkB,wBAAwB,6CAA6C,+CAA+C,iBAAiB,kDAAkD,EAAE,8BAA8B,yBAAyB,EAAE,iBAAiB,qBAAqB,iBAAiB,EAAE,4BAA4B,gCAAgC,sBAAsB,EAAE,+CAA+C,2zC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA7gB;AACmB;AACW;AACG;AACf;AACgC;AACnE;AAEiD;AACD;AACK;AAER;AACC;AAO/E;IAOE,oBACS,YAA2B,EAC1B,aAA6B,EAC7B,WAA8B,EAC9B,SAA0B,EAC1B,OAAsB,EACtB,YAAmC,EACnC,YAA0B,EAC3B,UAA6B,EAC7B,kBAAsC,EACtC,eAAiC;QATjC,iBAAY,GAAZ,YAAY,CAAe;QAC1B,kBAAa,GAAb,aAAa,CAAgB;QAC7B,gBAAW,GAAX,WAAW,CAAmB;QAC9B,cAAS,GAAT,SAAS,CAAiB;QAC1B,YAAO,GAAP,OAAO,CAAe;QACtB,iBAAY,GAAZ,YAAY,CAAuB;QACnC,iBAAY,GAAZ,YAAY,CAAc;QAC3B,eAAU,GAAV,UAAU,CAAmB;QAC7B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,oBAAe,GAAf,eAAe,CAAkB;QAZnC,kBAAa,GAAG,KAAK,CAAC;IAc7B,CAAC;IAED,6BAAQ,GAAR;QAAA,iBAcC;QAbC,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC1B,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,GAAG,CAAC;gBACnB,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC;aACnB,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,eAAK;YAClD,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,sBAAW,wCAAgB;aAA3B;YACE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,OAAO,uBAAuB,CAAC;aAChC;YAED,OAAQ,IAAI,CAAC,YAAY,CAAC,SAAoB,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACrF,CAAC;;;OAAA;IAED;;OAEG;IACW,sCAAiB,GAA/B;;;;;4BACiB,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;4BAC3C,OAAO,EAAE,iBAAiB;yBAC3B,CAAC;;wBAFI,MAAM,GAAG,SAEb;wBAEF,qBAAM,MAAM,CAAC,OAAO,EAAE;;wBAAtB,SAAsB,CAAC;;;;wBAGrB,SAAI;wBAA+B,qBAAM,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;;wBAA1E,GAAK,YAAY,IAAkB,SAAuC,EAAC;wBAC3E,IAAI,CAAC,mBAAmB,EAAE,CAAC;;;;wBAG3B,OAAO,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC;wBACf,qBAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAC,CAAC,CAAC;;wBAA9D,SAA8D,CAAC;;;wBAE/D,MAAM,CAAC,OAAO,EAAE,CAAC;;;;;;KAEpB;IAEY,gCAAW,GAAxB;;;;;4BACiB,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;4BAC3C,OAAO,EAAE,iBAAiB;yBAC3B,CAAC;;wBAFI,MAAM,GAAG,SAEb;wBAEF,qBAAM,MAAM,CAAC,OAAO,EAAE;;wBAAtB,SAAsB,CAAC;;;;6BAGjB,IAAI,CAAC,aAAa,EAAlB,wBAAkB;wBACpB,qBAAM,IAAI,CAAC,kBAAkB,EAAE;;wBAA/B,SAA+B,CAAC;;4BAEhC,qBAAM,IAAI,CAAC,cAAc,EAAE;;wBAA3B,SAA2B,CAAC;;4BAGK,qBAAM,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;;wBAAjE,YAAY,GAAiB,SAAoC;wBACvE,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,YAAY,CAAC,mBAAmB,EAAE,YAAY,CAAC,qBAAqB,CAAC,CAAC;wBAClH,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;wBAC1C,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,wFAAc,CAAC,cAAc,CAAC,CAAC;;;;wBAG7D,qBAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAC,CAAC,CAAC;;wBAA9D,SAA8D,CAAC;;;wBAE/D,MAAM,CAAC,OAAO,EAAE,CAAC;;;;;;KAEpB;IAED;;;;OAIG;IACK,mCAAc,GAAtB,UAAuB,KAAU;QAC/B,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAClD,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;OAEG;IACa,mCAAc,GAA9B;;;;;4BACE,qBAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;;wBAAlE,SAAkE,CAAC;wBACrD,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gCACxC,OAAO,EAAE,4BAA4B;gCACrC,QAAQ,EAAE,IAAI;6BACf,CAAC;;wBAHI,KAAK,GAAG,SAGZ;wBACF,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;wBAC7B,qBAAM,KAAK,CAAC,OAAO,EAAE;;wBAArB,SAAqB,CAAC;;;;;KACvB;IAED;;OAEG;IACa,uCAAkB,GAAlC;;;;;4BACE,qBAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;;wBAA1F,SAA0F,CAAC;wBAC7E,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gCACxC,OAAO,EAAE,6BAA6B;gCACtC,QAAQ,EAAE,IAAI;6BACf,CAAC;;wBAHI,KAAK,GAAG,SAGZ;wBACF,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;wBAC7B,qBAAM,KAAK,CAAC,OAAO,EAAE;;wBAArB,SAAqB,CAAC;;;;;KACvB;IAED;;OAEG;IACI,wCAAmB,GAA1B;QACE,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;YAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC5B;aAAM;YACL,IAAM,cAAc,GAAG,mCAAM,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;iBAC3C,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAChB,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAEpB,IAAM,cAAc,GAAG,mCAAM,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC;iBAC5C,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACjB,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAErB,IAAI,CAAC,aAAa,GAAI,IAAI,CAAC,YAAY,CAAC,SAAoB,CAAC,SAAS,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;SACxG;IACH,CAAC;IAED;;OAEG;IACU,iCAAY,GAAzB;;;gBACE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;;;;KAC5C;IA7JU,UAAU;QALtB,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,kGAAiC;;SAElC,CAAC;yCASuB,6EAAa;YACX,gFAAc;YAChB,gEAAiB;YACnB,8DAAe;YACjB,4DAAa;YACR,4GAAqB;YACrB,0FAAY;YACf,yFAAiB;YACT,8FAAkB;YACrB,uFAAgB;OAjB/B,UAAU,CA8JtB;IAAD,iBAAC;CAAA;AA9JsB;;;;;;;;;;;;;ACpBvB;AAAA;AAAA,IAAY,cAcX;AAdD,WAAY,cAAc;IACxB,sDAAoC;IACpC,oDAAkC;IAClC,wDAAsC;IACtC,iEAA+C;IAC/C,6DAA2C;IAC3C,wCAAsB;IACtB,8CAA4B;IAC5B,wDAAsC;IACtC,sDAAoC;IACpC,gDAA8B;IAC9B,gEAA8C;IAC9C,sDAAoC;IACpC,kEAAgD;AAClD,CAAC,EAdW,cAAc,KAAd,cAAc,QAczB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACd0C;AACQ;AACD;AACjB;AAGS;AAa1C;IAAoC,kCAAW;IAE7C,wBAAsB,IAAgB,EAAY,QAAkB;QAApE,YACE,kBAAM,IAAI,EAAE,QAAQ,CAAC,SAEtB;QAHqB,UAAI,GAAJ,IAAI,CAAY;QAAY,cAAQ,GAAR,QAAQ,CAAU;QAElE,gBAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;;IACxC,CAAC;uBALU,cAAc;IAOzB;;OAEG;IACI,qCAAY,GAAnB;QAAA,iBAKC;QAJC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,gBAAc,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,gBAAc,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACzG,SAAS,EAAE;aACX,IAAI,CAAC,gBAAM,IAAI,YAAI,CAAC,oBAAoB,CAAC,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAxD,CAAwD,CAAC;aACxE,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACI,mCAAU,GAAjB,UAAkB,MAAc;QAAhC,iBAMC;QALC,IAAM,IAAI,GAAG,EAAC,MAAM,UAAC,CAAC;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAgB,gBAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,gBAAc,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAChH,SAAS,EAAE;aACX,IAAI,CAAC,mBAAS,IAAI,YAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAApC,CAAoC,CAAC;aACvD,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,oCAAW,GAAlB;QAAA,iBAKC;QAJC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,gBAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,gBAAc,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACpG,SAAS,EAAE;aACX,IAAI,CAAC,iBAAO,IAAI,cAAO,CAAC,GAAG,CAAC,gBAAM,IAAI,YAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,EAAxD,CAAwD,CAAC;aACzE,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACK,6CAAoB,GAA5B,UAA6B,MAAqB;QAChD,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,MAAM,CAAC,SAAS,GAAG,0CAAU,CAAC,MAAM,CAAC,SAAS,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;SAC9E;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,qCAAY,GAAnB,UAAoB,EAAU,EAAE,MAAc;QAA9C,iBAKC;QAJC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,gBAAc,CAAC,GAAG,CAAC,eAAa,EAAI,CAAC,EAAE,EAAC,MAAM,UAAC,EAAE,gBAAc,CAAC,WAAW,EAAE,CAAC;aACxG,SAAS,EAAE;aACX,IAAI,CAAC,mBAAS,IAAI,YAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAApC,CAAoC,CAAC;aACvD,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACI,qCAAY,GAAnB,UAAoB,EAAU;QAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAc,CAAC,GAAG,CAAC,eAAa,EAAI,CAAC,EAAE,gBAAc,CAAC,WAAW,EAAE,CAAC;aACzF,SAAS,EAAE;aACX,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAEO,yCAAgB,GAAxB,UAAyB,MAAoB;QAC3C,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,MAAM,CAAC;SACf;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,kCAAS,GAAhB,UAAiB,EAAU;QAA3B,iBAKC;QAJC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,gBAAc,CAAC,GAAG,CAAC,eAAa,EAAI,CAAC,EAAE,gBAAc,CAAC,WAAW,EAAE,CAAC;aAC9F,SAAS,EAAE;aACX,IAAI,CAAC,gBAAM,IAAI,YAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC;aACjD,KAAK,CAAC,gBAAc,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;;IA1FU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAG4B,+DAAU,EAAsB,uDAAQ;OAFzD,cAAc,CA2F1B;IAAD,qBAAC;CAAA,CA3FmC,8DAAW,GA2F9C;AA3F0B","file":"pages-weight-weight-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { WeightPage } from './weight.page';\r\nimport { SideMenuModule } from '../../components/side-menu/side-menu.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: WeightPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    SideMenuModule\r\n  ],\r\n  declarations: [WeightPage]\r\n})\r\nexport class WeightPageModule {\r\n}\r\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>{{ wasAddedToday ? 'Edit' : 'Add' }} Weigh-in</ion-title>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <app-menu-button></app-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-button slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"deleteRecord()\\\">\\r\\n      <ion-icon name=\\\"close\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div padding class=\\\"todays-weighin\\\" *ngIf=\\\"wasAddedToday\\\">\\r\\n    <ion-icon name=\\\"alert\\\" size=\\\"large\\\"></ion-icon>\\r\\n    <div>You are editing today's weigh-in. You can only weigh-in once every 24 hours.</div>\\r\\n  </div>\\r\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"storeWeight()\\\">\\r\\n    <div class=\\\"global-input\\\">\\r\\n      <ion-label position=\\\"stacked\\\">New weight (lbs)</ion-label>\\r\\n      <ion-input type=\\\"number\\\" formControlName=\\\"weight\\\"></ion-input>\\r\\n    </div>\\r\\n    <div class=\\\"global-input\\\">\\r\\n      <ion-label position=\\\"stacked\\\">Last weigh-in (lbs)</ion-label>\\r\\n      <ion-input disabled=\\\"true\\\" [value]=\\\"latestWeight ? latestWeight.weight : 'No weight logged yet!'\\\"></ion-input>\\r\\n    </div>\\r\\n    <div class=\\\"global-input\\\">\\r\\n      <ion-label position=\\\"stacked\\\">Logged On</ion-label>\\r\\n      <ion-input disabled=\\\"true\\\" [value]=\\\"latestWeightDate\\\"></ion-input>\\r\\n    </div>\\r\\n    <div class=\\\"inline bottom-btn global-input\\\">\\r\\n      <ion-button type=\\\"button\\\" fill=\\\"clear\\\" expand=\\\"full\\\" (click)=\\\"deleteRecord()\\\">Cancel</ion-button>\\r\\n\\r\\n      <ion-button type=\\\"submit\\\" color=\\\"primary\\\" expand=\\\"full\\\" [disabled]=\\\"form.invalid\\\">\\r\\n        {{wasAddedToday ? 'Update' : '' }} Weigh-in\\r\\n      </ion-button>\\r\\n    </div>\\r\\n  </form>\\r\\n</ion-content>\\r\\n\"","module.exports = \".inline {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center; }\\n\\n.todays-weighin {\\n  display: flex;\\n  align-items: center;\\n  color: var(--ion-color-warning-contrast);\\n  border: 4px solid var(--ion-color-warning);\\n  margin: 20px;\\n  background: var(--ion-color-warning-lightest); }\\n\\n.todays-weighin ion-icon {\\n    margin-right: 12px; }\\n\\n.bottom-btn {\\n  margin-top: 20px;\\n  bottom: 10px; }\\n\\n.bottom-btn ion-button {\\n    text-transform: uppercase;\\n    font-size: 14px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvd2VpZ2h0L0U6XFxpb25pY1xcVmVydmVDb21tZXJjZVxcTmV3RGV2XFxtdHN0LWFwcC9zcmNcXGFwcFxccGFnZXNcXHdlaWdodFxcd2VpZ2h0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsbUJBQW1CLEVBQUE7O0FBR3JCO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix3Q0FBd0M7RUFDeEMsMENBQTBDO0VBQzFDLFlBQVk7RUFDWiw2Q0FBNkMsRUFBQTs7QUFOL0M7SUFRSSxrQkFBa0IsRUFBQTs7QUFJdEI7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWSxFQUFBOztBQUZkO0lBSUkseUJBQXlCO0lBQ3pCLGVBQWUsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3dlaWdodC93ZWlnaHQucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmlubGluZSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLnRvZGF5cy13ZWlnaGluIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci13YXJuaW5nLWNvbnRyYXN0KTtcclxuICBib3JkZXI6IDRweCBzb2xpZCB2YXIoLS1pb24tY29sb3Itd2FybmluZyk7XHJcbiAgbWFyZ2luOiAyMHB4O1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci13YXJuaW5nLWxpZ2h0ZXN0KTtcclxuICBpb24taWNvbiB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEycHg7XHJcbiAgfVxyXG59XHJcblxyXG4uYm90dG9tLWJ0biB7XHJcbiAgbWFyZ2luLXRvcDogMjBweDtcclxuICBib3R0b206IDEwcHg7XHJcbiAgaW9uLWJ1dHRvbiB7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gIH1cclxufVxyXG5cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ErrorsService } from '../../services/errors/errors.service';\r\nimport { Weight, WeightsService } from '../../services/weights/weights.service';\r\nimport { LoadingController, NavController, ToastController } from '@ionic/angular';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { RequestCachingService } from '../../services/interceptors/caching/request-caching.service';\r\nimport * as moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { ToastService } from '../../services/toast-service/toast-service.service';\r\nimport { OnboardingService } from '../../services/onboarding/onboarding.service';\r\nimport { CustomMacroService } from '../../services/custom-macro/custom-macro.service';\r\nimport { Transphormer } from '../../services/authentication/authentication.service';\r\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\r\nimport { AnalyticEvents } from '../../services/analytics/analytic-events.enum';\r\n\r\n@Component({\r\n  selector: 'app-weight',\r\n  templateUrl: './weight.page.html',\r\n  styleUrls: ['./weight.page.scss'],\r\n})\r\nexport class WeightPage implements OnInit {\r\n  public latestWeight: Weight | null;\r\n\r\n  public form: FormGroup;\r\n\r\n  public wasAddedToday = false;\r\n\r\n  constructor(\r\n    public errorService: ErrorsService,\r\n    private weightService: WeightsService,\r\n    private loadingCtrl: LoadingController,\r\n    private toastCtrl: ToastController,\r\n    private navCtrl: NavController,\r\n    private cacheService: RequestCachingService,\r\n    private toastService: ToastService,\r\n    public onboarding: OnboardingService,\r\n    public customMacroService: CustomMacroService,\r\n    public analyticService: AnalyticsService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      weight: new FormControl('', [\r\n        Validators.required,\r\n        Validators.max(600),\r\n        Validators.min(60),\r\n      ]),\r\n    });\r\n\r\n    this.form.get('weight').valueChanges.subscribe(value => {\r\n      this.roundOffWeight(value);\r\n    });\r\n\r\n    this.fetchLatestWeight();\r\n  }\r\n\r\n  public get latestWeightDate() {\r\n    if (!this.latestWeight) {\r\n      return 'No weight logged yet!';\r\n    }\r\n\r\n    return (this.latestWeight.logged_on as Moment).local().format('YYYY-MM-DD h:mm a');\r\n  }\r\n\r\n  /**\r\n   * Setups the latest weight\r\n   */\r\n  private async fetchLatestWeight() {\r\n    const loader = await this.loadingCtrl.create({\r\n      message: 'Please wait ...',\r\n    });\r\n\r\n    await loader.present();\r\n\r\n    try {\r\n      this.latestWeight = <Weight | null>await this.weightService.latestWeight();\r\n      this.checkWasLoggedToday();\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n      await this.toastService.flash(this.errorService.firstError(e));\r\n    } finally {\r\n      loader.dismiss();\r\n    }\r\n  }\r\n\r\n  public async storeWeight() {\r\n    const loader = await this.loadingCtrl.create({\r\n      message: 'Please wait ...',\r\n    });\r\n\r\n    await loader.present();\r\n\r\n    try {\r\n      if (this.wasAddedToday) {\r\n        await this.editExistingWeight();\r\n      } else {\r\n        await this.storeNewWeight();\r\n      }\r\n\r\n      const transphormer = <Transphormer>await this.onboarding.fetchOnBoard();\r\n      this.customMacroService.notifyToUpdateMacro(transphormer.latest_weight_value, transphormer.starting_weight_value);\r\n      this.navCtrl.navigateRoot('body-metrics');\r\n      this.analyticService.logEvent(AnalyticEvents.AddingWeightIn);\r\n\r\n    } catch (e) {\r\n      await this.toastService.flash(this.errorService.firstError(e));\r\n    } finally {\r\n      loader.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rounding off the weight value to prevent decimal places.\r\n   * @todo check why number pipe is not rendering updated values on view (could be a bug or something is missing).\r\n   * @param value\r\n   */\r\n  private roundOffWeight(value: any) {\r\n    value = parseFloat(value);\r\n    if (!isNaN(value)) {\r\n      this.form.get('weight').setValue(Math.round(value), {\r\n        emitEvent: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stores new weight in the system\r\n   */\r\n  protected async storeNewWeight() {\r\n    await this.weightService.saveWeight(this.form.get('weight').value);\r\n    const toast = await this.toastCtrl.create({\r\n      message: 'Weight logged successfully',\r\n      duration: 3000,\r\n    });\r\n    this.cacheService.clearAll();\r\n    await toast.present();\r\n  }\r\n\r\n  /**\r\n   * Edit existing weight\r\n   */\r\n  protected async editExistingWeight() {\r\n    await this.weightService.updateWeight(this.latestWeight.id, this.form.get('weight').value);\r\n    const toast = await this.toastCtrl.create({\r\n      message: 'Weight Updated successfully',\r\n      duration: 3000,\r\n    });\r\n    this.cacheService.clearAll();\r\n    await toast.present();\r\n  }\r\n\r\n  /**\r\n   * Setup various checks which will indicate the latest weight log was added the same day.\r\n   */\r\n  public checkWasLoggedToday() {\r\n    if (this.latestWeight === null) {\r\n      this.wasAddedToday = false;\r\n    } else {\r\n      const lowerBoundTime = moment().set('hour', 0)\r\n        .set('minute', 0)\r\n        .set('second', 0);\r\n\r\n      const upperBoundTime = moment().set('hour', 23)\r\n        .set('minute', 59)\r\n        .set('second', 59);\r\n\r\n      this.wasAddedToday = (this.latestWeight.logged_on as Moment).isBetween(lowerBoundTime, upperBoundTime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete latest record\r\n   */\r\n  public async deleteRecord() {\r\n    this.navCtrl.navigateBack('/body-metrics');\r\n  }\r\n}\r\n","export enum AnalyticEvents {\r\n  ViewingWorkouts = 'viewing_workouts',\r\n  AddingWeightIn = 'adding_weigh_in',\r\n  LoggingNutrition = 'logging_nutrition',\r\n  MessagingWithTrainer = 'messaging_with_trainer',\r\n  WatchingLiveStream = 'watching_live_stream',\r\n  HelpView = 'help_view',\r\n  WorkoutHelp = 'workout_help',\r\n  SearchingAdvisor = 'searching_advisor',\r\n  DroppingAdvisor = 'dropping_advisor',\r\n  TakingPhotos = 'taking_photos',\r\n  ViewingAnnouncements = 'viewing_announcements',\r\n  UpdatingProfile = 'updating_profile',\r\n  ChangingConfiguration = 'changing_configuration'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as moment from 'moment';\r\nimport { ErrorFormat } from '../errors/errors.service';\r\nimport { Moment } from 'moment';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nexport interface Weight {\r\n  weight: number;\r\n  logged_on: string | Moment;\r\n  id: number;\r\n  transphormer_id: number;\r\n  nice_logged_date?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WeightsService extends BaseService {\r\n\r\n  constructor(protected http: HttpClient, protected platform: Platform) {\r\n    super(http, platform);\r\n    WeightsService.SET_PLATFORM(platform);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the latest weight of the transphormer\r\n   */\r\n  public latestWeight(): Promise<Weight | null | ErrorFormat> {\r\n    return this.http.get<Weight>(WeightsService.Url('weigh-ins/latest'), WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(weight => this.loggedDateConversion(this.checkWeightValue(weight)))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Stores weight log for the transphormer\r\n   * @param weight\r\n   */\r\n  public saveWeight(weight: number): Promise<Weight | null | ErrorFormat> {\r\n    const data = {weight};\r\n    return this.http.post<Weight | null>(WeightsService.Url('weigh-ins'), data, WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(newWeight => this.loggedDateConversion(newWeight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * List all weights for the transphormer\r\n   */\r\n  public listWeights(): Promise<Weight[] | ErrorFormat> {\r\n    return this.http.get<Weight[]>(WeightsService.Url('weigh-ins'), WeightsService.BaseOptions(true, true))\r\n      .toPromise()\r\n      .then(weights => weights.map(weight => this.loggedDateConversion(weight)))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Converts logged date string value to date value\r\n   * @param weight\r\n   */\r\n  private loggedDateConversion(weight: Weight | null): Weight {\r\n    if (weight !== null) {\r\n      weight.logged_on = moment.utc(weight.logged_on, 'YYYY-MM-DD HH:mm:ss', true);\r\n    }\r\n\r\n    return weight;\r\n  }\r\n\r\n  /**\r\n   * Updates the weight\r\n   * @param id\r\n   * @param weight\r\n   */\r\n  public updateWeight(id: number, weight: number): Promise<Weight | ErrorFormat> {\r\n    return this.http.put<Weight>(WeightsService.Url(`weigh-ins/${id}`), {weight}, WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .then(newWeight => this.loggedDateConversion(newWeight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  /**\r\n   * Deletes the weight\r\n   * @param id\r\n   */\r\n  public deleteWeight(id: number): Promise<any | ErrorFormat> {\r\n    return this.http.delete(WeightsService.Url(`weigh-ins/${id}`), WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n\r\n  private checkWeightValue(weight: Weight | any): Weight | null {\r\n    if (weight.hasOwnProperty('id')) {\r\n      return weight;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get single weight instance\r\n   * @param id\r\n   */\r\n  public getWeight(id: number): Promise<Weight | ErrorFormat> {\r\n    return this.http.get<Weight>(WeightsService.Url(`weigh-ins/${id}`), WeightsService.BaseOptions())\r\n      .toPromise()\r\n      .then(weight => this.loggedDateConversion(weight))\r\n      .catch(WeightsService.HandleError);\r\n  }\r\n}\r\n"],"sourceRoot":""}