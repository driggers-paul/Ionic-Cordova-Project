{"version":3,"sources":["webpack:///./src/app/directives/autoresize/autoresize.directive.ts","webpack:///./src/app/directives/autoresize/autoresize.module.ts","webpack:///./src/app/services/authenticated-pusher/authenticated-pusher.service.ts","webpack:///./src/app/services/errors/errors.service.ts"],"names":[],"mappings":"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","file":"default~pages-chat-messages-chat-messages-module~pages-messages-messages-module.js","sourcesContent":["import { Directive, HostListener, ElementRef, Output, EventEmitter } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'ion-textarea[appAutoresize]'\r\n})\r\nexport class AutoresizeDirective {\r\n  public maxHeight;\r\n\r\n  @Output() resize: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostListener('ionChange')\r\n  change() {\r\n    this.adjust(this.element.nativeElement.lastChild);\r\n  }\r\n\r\n  constructor(public element: ElementRef) {\r\n    this.maxHeight = ((window.screen.height) / 4).toFixed(0);\r\n  }\r\n\r\n  adjust(textArea?: HTMLTextAreaElement | any): void {\r\n    // This is a bit of a hack. Since the internal element doesn't have an ID,\r\n    // I'm just assuming that the lastChild is the actual shadow <textarea>.\r\n    // Anyway, the way that this works is fairly simple...\r\n    // Grab the \"real\" input.\r\n    // Set the input to 1 row high and then set the style height to auto. This\r\n    // is required to get the height of the textarea to decrease when text is\r\n    // removed.\r\n    textArea.rows = 1;\r\n    textArea.style.height = 'auto';\r\n    // Grab the height of the shadow input's scroll-area.\r\n    let newHeight = textArea.scrollHeight;\r\n    // If it's bigger than 1/4 of the screen (see constructor), then limit it.\r\n    if (textArea.scrollHeight > this.maxHeight) {\r\n      newHeight = this.maxHeight;\r\n    }\r\n\r\n    const currentHeight = textArea.clientHeight;\r\n    // Set the height of both the shadow element and this element. This must\r\n    // be done, otherwise the shadow element will remain at a 1 row-size.\r\n    textArea.style.height = newHeight + 'px';\r\n    (textArea.parentNode as HTMLElement).style.height = newHeight + 'px';\r\n\r\n    if (newHeight + 'px' !== currentHeight) {\r\n      this.resize.emit();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AutoresizeDirective } from './autoresize.directive';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AutoresizeDirective],\r\n  exports: [AutoresizeDirective],\r\n})\r\nexport class AutoresizeModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport Pusher from 'pusher-js';\r\nimport { environment } from '../../../environments/environment';\r\nimport { BaseService } from '../base/base.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Platform } from '@ionic/angular';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticatedPusherService extends BaseService {\r\n\r\n  private pusher: Pusher;\r\n\r\n  constructor(public http: HttpClient, public platform: Platform) {\r\n    super(http, platform);\r\n\r\n    AuthenticatedPusherService.SET_PLATFORM(platform);\r\n\r\n    this.pusher = new Pusher(environment.pusher.key, {\r\n      cluster: environment.pusher.cluster,\r\n      host: environment.pusher.host,\r\n      encrypted: true,\r\n      authEndpoint: AuthenticatedPusherService.Url('broadcasting/auth'),\r\n      auth: {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Authorization': `Bearer ${window.localStorage.getItem('access_token')}`\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public openChannel(channelName: string) {\r\n    this.pusher.subscribe(channelName);\r\n  }\r\n\r\n  public closeChannel(channelName: string) {\r\n    this.pusher.unsubscribe(channelName);\r\n  }\r\n\r\n  public openEvent<T>(eventName: string): Observable<T> {\r\n    const subject = new Subject<T>();\r\n\r\n    this.pusher.bind(eventName, (data) => {\r\n      subject.next(data as T);\r\n    });\r\n\r\n    return subject.asObservable();\r\n  }\r\n\r\n  public closeEvent(eventName, callback?: Function) {\r\n    this.pusher.unbind(eventName, callback);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormControl } from '@angular/forms';\r\n\r\ntype StateColors = 'dark' | 'danger' | 'warning';\r\n\r\nexport interface ErrorFormat {\r\n  status: number;\r\n  list: ErrorList;\r\n}\r\n\r\nexport interface ErrorList {\r\n  [key: string]: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorsService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  public stateColor(item: FormControl | AbstractControl): StateColors {\r\n    if (item.invalid && !item.dirty) {\r\n      return 'dark';\r\n    } else if (item.invalid) {\r\n      return 'danger';\r\n    } else {\r\n      return 'dark';\r\n    }\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  /**\r\n   * Returns the first error key with first value in the error object\r\n   * @param errors\r\n   * @return string\r\n   */\r\n  public firstError(errors: ErrorFormat): string {\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return '';\r\n    }\r\n\r\n    const keys = Object.keys(errors.list);\r\n    return errors.list[keys[0]][0];\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  /**\r\n   * Returns the errors for the key\r\n   * @param key\r\n   * @param errors\r\n   */\r\n  public errorForKey(key: string, errors: ErrorFormat): string[] {\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return [];\r\n    }\r\n    if (errors.list.hasOwnProperty(key)) {\r\n      return errors.list[key];\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  /**\r\n   * Returns the first error value for the given key\r\n   * @param key\r\n   * @param errors\r\n   */\r\n  public firstErrorForKey(key: string, errors: ErrorFormat): string {\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return '';\r\n    }\r\n\r\n    if (errors.list.hasOwnProperty(key)) {\r\n      if (errors.list[key].length > 0) {\r\n        return errors.list[key][0];\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  /**\r\n   * Checks whether the given key has any errors\r\n   * @param key\r\n   * @param errors\r\n   */\r\n  public keyHasError(key: string, errors: ErrorFormat): boolean {\r\n\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return false;\r\n    }\r\n\r\n    if (errors.list.hasOwnProperty(key)) {\r\n      return errors.list[key].length > 0;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  /**\r\n   * Checks whether the given key has any errors\r\n   * @param errors\r\n   */\r\n  public hasError(errors: ErrorFormat): boolean {\r\n\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return false;\r\n    }\r\n\r\n    for (const key in errors.list) {\r\n      if (errors.list[key].length > 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the error status value\r\n   * @param errors\r\n   */\r\n  public status(errors: ErrorFormat): number {\r\n    if (!this.checkIsCorrectStructure(errors)) {\r\n      return -1;\r\n    }\r\n    return errors.status;\r\n  }\r\n\r\n  public checkIsCorrectStructure(error: any | ErrorFormat, throwException: boolean = true): boolean {\r\n    const isCorrect = !(!error.hasOwnProperty('status') || !error.hasOwnProperty('list'));\r\n\r\n    if (throwException && isCorrect === false) {\r\n      throw error;\r\n    }\r\n\r\n    return isCorrect;\r\n  }\r\n}\r\n"],"sourceRoot":""}